// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target arm64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name LogDropSDK
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import CoreTelephony
import CryptoKit
import Foundation
@_exported import LogDropSDK
import MachO
import SQLite3
import Swift
import SystemConfiguration
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public struct LogFlow : Swift.Codable {
  public init(name: Swift.String, id: Swift.String, customAttributes: [Swift.String : Swift.String]? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct LogDropConfig {
  public var apiKey: Swift.String
  public var baseUrl: Swift.String
  public var isLoggingEnabled: Swift.Bool
  public var defaultSDKDisabled: Swift.Bool
  public var sensitiveInfoFilter: [Foundation.NSRegularExpression]
  public var crashTrackingEnabled: Swift.Bool
  public var consoleLoggingEnabled: Swift.Bool
  public var frameworkType: LogDropSDK.FrameworkType
  public var isHttpLoggingEnabled: Swift.Bool
  public class Builder {
    public init()
    public func setApiKey(_ apiKey: Swift.String) -> LogDropSDK.LogDropConfig.Builder
    public func setLoggingEnabled(_ isLoggingEnabled: Swift.Bool) -> LogDropSDK.LogDropConfig.Builder
    public func setDefaultSDKDisabledValue(_ defaultSDKDisabled: Swift.Bool) -> LogDropSDK.LogDropConfig.Builder
    public func setSensitiveInfoFilter(sensitiveInfoFilter: [Foundation.NSRegularExpression]) -> LogDropSDK.LogDropConfig.Builder
    public func setBaseUrl(_ baseUrl: Swift.String) -> LogDropSDK.LogDropConfig.Builder
    public func setCrashTrackingEnabled(_ crashTrackingEnabled: Swift.Bool) -> LogDropSDK.LogDropConfig.Builder
    public func setConsoleLoggingEnabled(_ consoleLoggingEnabled: Swift.Bool) -> LogDropSDK.LogDropConfig.Builder
    public func setFrameworkType(_ frameworkType: LogDropSDK.FrameworkType) -> LogDropSDK.LogDropConfig.Builder
    public func setIsHttpLoggingEnabled(_ isHttpLoggingEnabled: Swift.Bool) -> LogDropSDK.LogDropConfig.Builder
    public func build() -> LogDropSDK.LogDropConfig
    @objc deinit
  }
}
extension Foundation.URLSession {
  public static func enableSessionInitSwizzle()
}
@_hasMissingDesignatedInitializers public class LogDrop {
  public static func initialize(with config: LogDropSDK.LogDropConfig)
  public static func sendLogs(completion: @escaping (Swift.Result<Swift.Bool, any Swift.Error>) -> Swift.Void = { _ in })
  public static func onRemoteMessageReceived(_ userInfo: [Swift.AnyHashable : Any])
  public static func updateUser(userUuid: Swift.String, completion: @escaping (Swift.Result<Swift.Bool, any Swift.Error>) -> Swift.Void = { _ in })
  public static func onNewApnsToken(apnsToken: Foundation.Data)
  public static func saveCustomCrashReport(threadName: Swift.String, stackTrace: Swift.String, crashType: Swift.String)
  public static func e(_ message: Swift.String, logFlow: LogDropSDK.LogFlow? = nil, file: Swift.String = #file, line: Swift.Int = #line)
  public static func d(_ message: Swift.String, logFlow: LogDropSDK.LogFlow? = nil, file: Swift.String = #file, line: Swift.Int = #line)
  public static func i(_ message: Swift.String, logFlow: LogDropSDK.LogFlow? = nil, file: Swift.String = #file, line: Swift.Int = #line)
  public static func w(_ message: Swift.String, logFlow: LogDropSDK.LogFlow? = nil, file: Swift.String = #file, line: Swift.Int = #line)
  public static func c(_ message: Swift.String, logFlow: LogDropSDK.LogFlow? = nil, file: Swift.String = #file, line: Swift.Int = #line)
  @objc deinit
}
public enum FrameworkType : Swift.String, Swift.Codable {
  case native
  case reactNative
  case flutter
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class ConsoleLogCapture {
  public static let shared: LogDropSDK.ConsoleLogCapture
  public func startCapture()
  @objc deinit
}
public struct LogDropError : Foundation.LocalizedError {
  public var errorDescription: Swift.String?
}
extension LogDropSDK.FrameworkType : Swift.Equatable {}
extension LogDropSDK.FrameworkType : Swift.Hashable {}
extension LogDropSDK.FrameworkType : Swift.RawRepresentable {}
